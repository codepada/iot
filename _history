{"entries":[{"timestamp":1757134713187,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":2961,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"shdiaMYhyA.U_1:JiP^p\">ir-sensor</variable></variables><block type=\"pxt-on-start\" id=\"jt*dtG@-beUf@@v%.V.u\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"MQTT_initializeUART\" id=\"z`ld9/_JrrW6$sv!xo]c\"><field name=\"tx\">SerialPin.P1</field><field name=\"rx\">SerialPin.P2</field><next><block type=\"MQTT_setConnectionInfo\" id=\"X^mH47Ngh!HLnUZvweBs\"><value name=\"uniqueId\"><shadow type=\"text\" id=\"ZAm4,?(Gda3c#9HI#OOy\"><field name=\"TEXT\">microbit-control</field></shadow></value><value name=\"ssid\"><shadow type=\"text\" id=\"FW]ft07}mdO)`k.yK-kB\"><field name=\"TEXT\">InwO</field></shadow></value><value name=\"password\"><shadow type=\"text\" id=\",,hsVK-.*[}KH``.doL)\"><field name=\"TEXT\">11222222</field></shadow></value><next><block type=\"MQTT_connect\" id=\"I]U~^@Gv~2|#[.o2-P$a\"></block></next></block></next></block></statement></block><block type=\"device_button_event\" id=\"O|4t$dYHR5-snXAhDe@=\" x=\"-1\" y=\"288\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"MQTT_connect\" id=\"Oe*Q$mLc^CjV7BHZavey\"></block></statement></block><block type=\"device_button_event\" id=\"~k]eMK9E]nckMTVv2--b\" x=\"306\" y=\"284\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"MQTT_b2MQTT\" id=\"I[o.Xo/yi$.Mf;p`QD`~\"><value name=\"data\"><block type=\"text_join\" id=\"~UG_DfLe`wp~.;apZ/v7\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" id=\"4dA-VMF{u|TsfBVTGHxA\"><field name=\"TEXT\">Temp : </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\" id=\"gm,=aY@EUNE~X9Yg8cIl\"><field name=\"TEXT\">World</field></shadow><block type=\"device_temperature\" id=\"BVy@=AcbRg,q.,J]c#Uk\"></block></value></block></value></block></statement></block><block type=\"device_forever\" id=\"LOUY%inxMiM1xGjs2?U`\" x=\"-2\" y=\"501\"><statement name=\"HANDLER\"><block type=\"variables_set\" id=\"1i(e{lhvzlsEqrfb5+Lv\"><field name=\"VAR\" id=\"shdiaMYhyA.U_1:JiP^p\">ir-sensor</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"K7,NA`(|p0|}PfJ/((e8\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"controls_if\" id=\"a-IzY`!qDC]LGCJUo0w$\"><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"k/!%|Xk^R(A.1^7ywpnc\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"futQdx@mXMV+eG_{aFy[\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"[o_kd;WYDSC.-=@f7xgV\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"W|w?zYtw3Xd3,I[qx7X,\"><field name=\"VAR\" id=\"shdiaMYhyA.U_1:JiP^p\">ir-sensor</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"Z](3.!Oa9:G!~Q#ve,@o\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"MQTT_b2MQTT\" id=\"z~Cr1St4TQh$sG1[PNH6\"><value name=\"data\"><block type=\"text\" id=\"Q.5mzAUd1;0C#{QURRLw\"><field name=\"TEXT\">Find Object</field></block></value></block></statement></block></next></block></statement></block></xml>"]]}]}]}],"snapshots":[{"timestamp":1757134713186,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"shdiaMYhyA.U_1:JiP^p\">ir-sensor</variable></variables><block type=\"pxt-on-start\" id=\"jt*dtG@-beUf@@v%.V.u\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"MQTT_initializeUART\" id=\"z`ld9/_JrrW6$sv!xo]c\"><field name=\"tx\">SerialPin.P1</field><field name=\"rx\">SerialPin.P2</field><next><block type=\"MQTT_setConnectionInfo\" id=\"X^mH47Ngh!HLnUZvweBs\"><value name=\"uniqueId\"><shadow type=\"text\" id=\"ZAm4,?(Gda3c#9HI#OOy\"><field name=\"TEXT\">microbit-control</field></shadow></value><value name=\"ssid\"><shadow type=\"text\" id=\"FW]ft07}mdO)`k.yK-kB\"><field name=\"TEXT\">InwO</field></shadow></value><value name=\"password\"><shadow type=\"text\" id=\",,hsVK-.*[}KH``.doL)\"><field name=\"TEXT\">11222222</field></shadow></value><next><block type=\"MQTT_connect\" id=\"I]U~^@Gv~2|#[.o2-P$a\"></block></next></block></next></block></statement></block><block type=\"device_button_event\" id=\"O|4t$dYHR5-snXAhDe@=\" x=\"-1\" y=\"288\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"MQTT_connect\" id=\"Oe*Q$mLc^CjV7BHZavey\"></block></statement></block><block type=\"device_button_event\" id=\"~k]eMK9E]nckMTVv2--b\" x=\"306\" y=\"284\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"MQTT_b2MQTT\" id=\"I[o.Xo/yi$.Mf;p`QD`~\"><value name=\"data\"><block type=\"text_join\" id=\"~UG_DfLe`wp~.;apZ/v7\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" id=\"4dA-VMF{u|TsfBVTGHxA\"><field name=\"TEXT\">Temp : </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\" id=\"gm,=aY@EUNE~X9Yg8cIl\"><field name=\"TEXT\">World</field></shadow><block type=\"device_temperature\" id=\"BVy@=AcbRg,q.,J]c#Uk\"></block></value></block></value></block></statement></block><block type=\"device_forever\" id=\"LOUY%inxMiM1xGjs2?U`\" x=\"-2\" y=\"501\"><statement name=\"HANDLER\"><block type=\"variables_set\" id=\"1i(e{lhvzlsEqrfb5+Lv\"><field name=\"VAR\" id=\"shdiaMYhyA.U_1:JiP^p\">ir-sensor</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"K7,NA`(|p0|}PfJ/((e8\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"controls_if\" id=\"a-IzY`!qDC]LGCJUo0w$\"><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"k/!%|Xk^R(A.1^7ywpnc\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"futQdx@mXMV+eG_{aFy[\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"[o_kd;WYDSC.-=@f7xgV\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"W|w?zYtw3Xd3,I[qx7X,\"><field name=\"VAR\" id=\"shdiaMYhyA.U_1:JiP^p\">ir-sensor</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"Z](3.!Oa9:G!~Q#ve,@o\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"MQTT_b2MQTT\" id=\"z~Cr1St4TQh$sG1[PNH6\"><value name=\"data\"><block type=\"text\" id=\"Q.5mzAUd1;0C#{QURRLw\"><field name=\"TEXT\">Find Object</field></block></value></block></statement></block></next></block></statement></block></xml>","main.ts":"","README.md":"\n> Open this page at [https://codegigo.github.io/stylor/](https://codegigo.github.io/stylor/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/codegigo/stylor** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/codegigo/stylor** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","custom.ts":"//% color=\"#AA278D\" weight=100\nnamespace MQTT {\n\n    let uniqueId_var = \"\";\n    let ssid_var = \"\";\n    let password_var = \"\";\n    let mqttBroker_var = \"broker.hivemq.com\";\n    let mqttPort_var = \"1883\";\n    let onReceivedHandler: (data: string) => void;\n\n    //% block=\"set connection info uniqueId %uniqueId|SSID %ssid|Password %password\"\n    //% uniqueId.defl=\"microbit-control\"\n    //% ssid.defl=\"InwO\"\n    //% password.defl=\"11222222\"\n    export function setConnectionInfo(uniqueId: string, ssid: string, password: string): void {\n        uniqueId_var = uniqueId;\n        ssid_var = ssid;\n        password_var = password;\n    }\n\n    //% block=\"initialize UART Tx pin %tx|Rx pin %rx\"\n    //% tx.defl=SerialPin.P1\n    //% rx.defl=SerialPin.P2\n    export function initializeUART(tx: SerialPin, rx: SerialPin): void {\n        // Initialize UART with the provided pins\n        serial.redirect(\n            tx,\n            rx,\n            BaudRate.BaudRate115200\n        );\n        basic.pause(100); // Small pause for serial to be ready\n    }\n\n    //% block=\"connect\"\n    export function connect(): void {\n        basic.pause(4000)\n        let config_data = \"CONFIG_DATA:\" + uniqueId_var + \",\" + ssid_var + \",\" + password_var + \",\" + mqttBroker_var + \",\" + mqttPort_var;\n        serial.writeLine(config_data);\n        basic.showString(\"Config Sent!\");\n    }\n\n    //% block=\"on MQTT data received\"\n    //% draggableParameters\n    export function onEsp32DataReceived(handler: (data: string) => void): void {\n        onReceivedHandler = handler;\n        serial.onDataReceived('\\n', function () {\n            let receivedData = serial.readLine();\n            let processedData = receivedData.trim();\n            if (onReceivedHandler) {\n                onReceivedHandler(processedData);\n                if (processedData === \"WIFI_CONNECTED\") {\n                    basic.showIcon(IconNames.Yes)\n                    basic.showString(\"WIFI-OK\");\n                }\n\n            }\n        });\n    }\n\n\n    //% block=\"sent data %data\"\n    export function b2MQTT(data: any): void {\n        basic.showString(\"S\");\n        let status_json = '{\"deviceId\": \"' + uniqueId_var + '\", \"data\":\"' + data + '\"}';\n        serial.writeLine(status_json + \"\\n\");\n\n    }\n\n    // --- ส่วนโค้ดสำหรับบล็อกที่มีเมนูให้เลือก (Dropdown) ---\n    export enum PinChannel {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n\n    let PinChannels: { [key: number]: DigitalPin } = {\n        [PinChannel.P0]: DigitalPin.P0,\n        [PinChannel.P1]: DigitalPin.P1,\n        [PinChannel.P2]: DigitalPin.P2,\n        [PinChannel.P8]: DigitalPin.P8,\n        [PinChannel.P12]: DigitalPin.P12,\n        [PinChannel.P13]: DigitalPin.P13,\n        [PinChannel.P14]: DigitalPin.P14,\n        [PinChannel.P15]: DigitalPin.P15,\n        [PinChannel.P16]: DigitalPin.P16,\n    }\n\n\n\n    //% block=\"Pin Control %pin| with %data\"\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.columns=3\n\n    export function setPinIfMatch(pin: PinChannel, data: string): void {\n        const parts = data.split(\"=\");\n        if (parts.length === 2) {\n            const pinName = parts[0];\n            const value = parseInt(parts[1], 10);\n\n            let selectedPinName: string;\n            switch (pin) {\n                case PinChannel.P0: selectedPinName = \"P0\"; break;\n                case PinChannel.P1: selectedPinName = \"P1\"; break;\n                case PinChannel.P2: selectedPinName = \"P2\"; break;\n                case PinChannel.P8: selectedPinName = \"P8\"; break;\n                case PinChannel.P12: selectedPinName = \"P12\"; break;\n                case PinChannel.P13: selectedPinName = \"P13\"; break;\n                case PinChannel.P14: selectedPinName = \"P14\"; break;\n                case PinChannel.P15: selectedPinName = \"P15\"; break;\n                case PinChannel.P16: selectedPinName = \"P16\"; break;\n            }\n\n            if (pinName === selectedPinName) {\n                pins.digitalWritePin(PinChannels[pin], value);\n\n                // สร้างและส่งข้อความ JSON กลับไป\n                let status_json = '{\"deviceId\": \"' + uniqueId_var + '\", \"pins\": {\"' + selectedPinName + '\": ' + value + '}}';\n                serial.writeLine(status_json + \"\\n\");\n            }\n        }\n    }\n}","pxt.json":"{\n    \"name\": \"iot\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"8.0.16\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}}],"shares":[],"lastSaveTime":1757134727458}